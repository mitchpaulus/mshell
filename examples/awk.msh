#!/usr/bin/env mshell

# 1. Print the total nubmer of input lines:
# END { print NR }
.. len wl

# 2. Print the 10th input line:
# NR == 10
.. :10: wl

# 3. Print the last field of every input line:
# { print $NF }
wt (:-1: wl) each

# 4. Print the last field of the last input line:
#     { field = $NF }
# END { print field }
wt :-1: :-1: wl

# 5. Print every input line with more than four fields
# NF > 4
.. (wsplit len 4 >) filter (wl) each

# 6. Print every input line in which the last field is more than 4
# $NF > 4
.. (wsplit :-1: toFloat 4 >) filter (wl) each

# 7. Print the total number of fields in all input lines
#     { nf = nf + $NF }
# END { print nf }
.. (wsplit len) map sum wl

# 8. Print the total number of lines that contain 'Beth'
# /Beth/ { nlines = nlines + 1 }
# END { print nlines }
.. ("Beth" in) filter len wl

# 9. Print the largest first field and the line that contains it (assumes some $1 is positive):
# $1 > max { max = $1; line = $0 }
# END      { print max, line }
-99999999 max! "" max-line!
..
(
    dup line! # Store line
    wsplit :0: toFloat dup first-item! # Store first item
    [(@max >) (@first-item max! @line max-line!)] if
) each
@max str w " " w @max-line wl


# 10. Print every line that has at least one field
# NF > 0
.. (wsplit len 0 >) filter (wl) each

# 11. Print every line longer than 80 characters
# length($0) > 80
stdin lines (len 80 >) filter (wl) each

# 12. Print the number of fields in every line followed by the line itself
# { print NF, $0 }
stdin lines (dup " " split len w " " w wl) each

# 13. Print the first two fields in opposite order, of every line
# { print $2, $1 }
stdin lines (" " split :1: :2: w w) each

# 14. Exchange the first two fields of every line and then print the line
# { temp = $1; $1 = $2; $2 = temp; print }
# Need a way to write value into an index.
# stdin lines (dup " " split :1: :2: swap w w) each

# 15. Print every line with the first field replaced by the line number
# { $1 = NR; print }
# Need a way to write value into an index.
# stdin lines (dup w 1 w w) each

# 16. Print every line after erasing the second field
# { $2 = ""; print }
.. (ws split 1 del " " join wl) each

# 17. Print in reverse order the fields of every line
# { for (i = NF; i > 0; i = i - 1) printf "%s ", $i
# printf "\n"
# }
stdin lines (" " split reverse " " join wl) each

# 18. Print the sums of the fields of every line
# { sum = 0
#   for (i = 1; i <= NF; i = i + 1) sum = sum + $i
#   print sum
# }
=> (" " split (toFloat) map sum wl) each

# 19. Add up all fields in all lines and print the sum
# { for (i = 1; i <= NF; i = i + 1) sum = sum + $i }
# END { print sum }
stdin lines (" " split (toFloat) map sum) map sum wl

# 20. Print every line after replacing each field by its absolute value
# { for (i = 1; i <= NF; i = i + 1) $i = ($i < 0) ? -$i : $i; print }
stdin lines (" " split (toFloat abs) map " " join wl) each
