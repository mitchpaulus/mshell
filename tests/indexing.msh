[
1 [1 2 3] :2: + str
"My string" :3:
myliteral :4:
] " " join wl

"My string" :5 wl
"Another" 3: wl
"Full Range" 1:3 wl

# Negative indexing
"12345" :-1: wl  # 5
"12345" -3: wl   # 345
"12345" :-4 wl   # 1
"12345" -4:-2 wl # 23

def cjoinw ([str] --) ", " join wl end

# Test deletion at index
["a" "b" "c" "d"] 2 del cjoinw
1 ["a" "b" "c" "d"] del cjoinw
["a" "b" "c" "d"] -1 del cjoinw
-1 ["a" "b" "c" "d"] del cjoinw

# Test insertion at index
["a" "b" "c" "d"] "x" 2 insert cjoinw
["a" "b" "c" "d"] "x" -1 insert cjoinw

# Test updating at index
["a" "b" "c" "d"] "x" 2 setAt cjoinw
["a" "b" "c" "d"] "x" -1 setAt cjoinw

["a" "b" "c" "d"] reverse cjoinw

# Test multiple slices
["0" "1" "2" "3" "4" "5" "6" "7" "8" "9"] testList!

@testList    :2:, -1:, 3:5, :2, cjoinw
"0123456789" :2:, -1:, 3:5, :2, wl
[--0123456789 :2:, -1:, 3:5, :2,] :0: wl
`0123456789` :2:, -1:, 3:5, :2, str wl
[
    [printf "1\n"]
    [echo 2]
    [cat]
] | :0:, :2: ;

# Came across parsing bug with indexing within quotation.
[
    ["a" "b" "c" "d"]
    ["e" "f" "g" "h"]
    ["i" "j" "k" "l"]
] (:1:, :0:, 2:, cjoinw) each
