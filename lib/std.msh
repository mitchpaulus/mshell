# Standard library for mshell

# each (list quote: (item --) --)
def each
    over len each-len! # Get total length
    0 each-idx! # index
    (
        [(@each-idx @each-len >=) (break)] if
        # "Each idx: " w @each-idx w " Each len: " w @each-len wl
        over @each-idx nth # Get current item
        over x  # Copy over quote, execute
        @each-idx 1 + each-idx! # inc index
        # "Each idx: " w @each-idx wl
    ) loop

    # Drop list and quote, total length, index
    drop drop
end

# map (list quote -- list)
def map
    over len map-len! # Get total length
    0 map-idx! # Index
    [] map-accum! # Accumulator
    (
        [(@map-idx @map-len >=) (break)] if
        over @map-idx nth # Get current item  list quote item
        over x # Copy over quote, execute

        # list quote new-item
        @map-accum swap append drop # Append to accumulator
        @map-idx 1 + map-idx! # inc index
    ) loop

    # Drop list and quote, push accumulator
    drop drop @map-accum
end

# filter (list quote -- list)
def filter
    over len filter-len! # Get total length
    0 filter-idx! # Index
    [] filter-accum! # Accumulator
    (
        [(@filter-idx @filter-len >=) (break)] if
        over over # list quote list quote
        over @filter-idx nth # Get current item
        dup rot # Get to item item quote
        x # Execute quote
        [() (@filter-accum append filter-accum!) (drop)] if
        drop @filter-idx 1 + filter-idx! # inc index
    ) loop

    # Drop list and quote, push accumulator
    drop drop @filter-accum
end

# foldl (quote initial list -- result)
def foldl
    #  quote initial list
    swap foldl-accum!  # Accumulator,
    # quote list
    swap foldl-quote! # Quote
    # list
    (
        @foldl-accum swap # Accumulator item
        @foldl-quote x # Execute quote
        foldl-accum! # Update accumulator
    ) each

    @foldl-accum
end

# sum (list -- value)
def sum
    (+) 0 rot foldl
end

# .. (-- list[str]), equals kinda looks like lines.
def .. stdin lines end

# tt = Tab separated Table (-- list[list[str]])
def tt .. ("	" split) map end

# wt = Whitespace separated Table (-- list[list[str]])
def wt .. (wsplit) map  end

# wjoin = Whitespace join (list -- str)
def wjoin " " join end

# unlines (list[str] -- str)
def unlines
    [] unlines-accum! # Accumulator
    (
        @unlines-accum append
       "\n" append
       drop
    ) each
    @unlines-accum "" join
end

# reverse (list|string -- list)
def reverse
    dup len 1 - reverse-idx! # Set Idx
    [] # list accum
    (
        [(@reverse-idx 0 <) (break)] if
        over @reverse-idx nth append # Get current item
        @reverse-idx 1 - reverse-idx! # dec index
    ) loop
    nip # Drop original list
end
